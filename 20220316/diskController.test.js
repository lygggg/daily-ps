/*
이해
하드디스크는 한 번에 하나의 작업만 수행할 수 있습니다. 디스크 컨트롤러를
구현하는 방법은 여러 가지가 있습니다. 가장 일반적인 방법은 요청이 들어온 순서대로
처리하는 것입니다.

예를들어
- 0ms 시점에 3ms가 소요되는 A작업 요청
- 1ms 시점에 9ms가 소요되는 B작업 요청
- 2ms 시점에 6ms가 소요되는 C작업 요청

한 번에 하나의 요청만 수행할 수 있기 떄문에 각각의 작업을 요청받은 순서대로 처리하면
다음과 같이 처리됩니다.

- A: 3ms 시점에 작업 완료 (요청에서 종료까지 : 3ms)
- B: 1ms부터 대기하다가, 3ms 시점에 작업을 시작해서 12ms 시점에 작업 완료 (요청에서 종료까지: 11ms)
- C: 2ms부터 대기하다가, 12ms 시점에 작업을 시작해서 18ms 시점에 작업 완료 (요청에서 종료까지: 16ms)

이 때 각 작업의 요청부터 종료까지 걸린 시간의 평균은 10ms(=(3 + 11 + 16)/3)이 됩니다.
하지만 A => C => B 순서대로 처리하면

- A: 3ms 시점에서 작업 완료(요청에서 종료까지 :3ms)
- C: 2ms부터 대기하다가, 3ms 시점에 작업을 시작해서 9ms 시점에 작업 완료(요청에서 종료까지: 7ms)
- B: 1ms부터 대기하다가, 9ms 시점에 작업을 시작해서 18ms 시점에 작업 완료(요청에서 종료까지: 17ms)

이렇게 A => C => B의 순서대로 처리하면 각 작업의 요청부터 종료까지 걸린 시간의 평균은 9ms(=(3+7+17)/3)가 됩니다.
각 작업에 대해 [작업이 요청되는 시점, 작업의 소요시간]을 담은 2차원 배열 jobs가 매개변수로 주어질 때,
작업의 요청부터 종료까지 걸린 시간의 평균을 가장 줄이는 방법으로 처리하면 평균이
얼마가 되는지 리턴하세요. (단 소수점은 버립니다.)

제한사항
- jobs의 길이는 1 이상 500 이하입니다.
- jobs의 각 행은 하나의 작업에 대한 [작업이 요청되는 시점, 작업의 소요시간] 입니다.
- 각 작업에 대해 작업이 요청되는 시간은 0 이상 1,000 이하입니다.
- 각 작업에 대해 작업의 소요시간은 1 이상 1,000 이하입니다.
- 하드디스크가 작업을 수행하고 있지 않을 때에는 먼저 요청이 들어온 작업부터 처리합니다.

계획
문제 해결을 위한 요구사항

우선순위에 의한 처리(기본적으로는 요청 된 순번으로 처리 해야 함.)

요청순으로 특정 작업을 처리하는 도중 다른 요청이 들어오면
1건만 있는 경우 작업 끝나고 처리
2건 이상인 경우는 처리 시간이 짧은 항목부터 처리

딱 이내용만 맞춰서 돌리면 전부 성공 뜸.

구현에 필요한 건 당연히 정렬은 해야 하고 처리 도중 들어온 작업인지 확인하는 과정에서 요청시간 순으로 하나씩 빼서 확인할 때
0번 처리 중 복수의 작업(ex: 1번, 2번)이 요청 됐다면 복수의 작업을 처리시간 순(1번, 2번 중 처리시간이 짧은걸 먼저 처리)으로 정렬해서 순서데로 처리.

처리 과정 중 대기시간 + 작업 소요 시간만 잘 저장해서 넣어두고 마지막에 평균 구하면 됩니다.

들어온 job들을 요청 시점을 기준으로 오름차순으로 정렬하고, 작업 수행 시간을 기준으로 
q를 만든다. 작업 요청 시점이 빠른 job부터 q에 추가하고 지난 작업을 마친 시간보다 이전에 요청한
job들이 있다면 q에 모두 집어넣고 작업 시간이 짧은 job부터 수행한다.
*/

const diskController = (jobs) => {
  let j = 0;
  let time = 0;
  let sum = 0;
  let priorityQueue = [];
  jobs.sort((a, b) => a[0] - b[0]);

  while (jobs.length > j || priorityQueue.length !== 0) {
    console.log(jobs[j][0]);
    if (jobs.length > j && time >= jobs[j][0]) {
      priorityQueue.push(jobs[j++]);
      priorityQueue.sort((a, b) => {
        return a[1] - b[1];
      });
      console.log(priorityQueue, time);
      continue;
    }
    if (priorityQueue.length !== 0) {
      time += priorityQueue[0][1];
      sum += time - priorityQueue[0][0];

      priorityQueue.shift();
    } else {
      time = jobs[j][0];
    }
  }

  return Math.floor(sum / jobs.length);
};

test("diskController", () => {
  expect(
    diskController([
      [0, 3],
      [1, 9],
      [2, 6],
    ])
  ).toBe(9);
  // expect(
  //   diskController([
  //     [1, 9],
  //     [1, 4],
  //     [1, 5],
  //     [1, 7],
  //     [1, 3],
  //   ])
  // ).toBe(13);
  // expect(
  //   diskController([
  //     [1, 1],
  //     [3, 1],
  //     [5, 2],
  //   ])
  // ).toBe(1);
  // expect(
  //   diskController([
  //     [0, 10],
  //     [2, 12],
  //     [9, 19],
  //     [15, 17],
  //   ])
  // ).toBe(25);
  // expect(
  //   diskController([
  //     [10, 10],
  //     [30, 10],
  //     [50, 2],
  //     [51, 2],
  //   ])
  // ).toBe(6);
});

/*[[0, 3], [1, 9], [2, 6]] : 9
[[0, 10], [2, 10], [9, 10], [15, 2]] : 14
[[0, 10], [2, 12], [9, 19], [15, 17]] : 25
[[0, 1]] : 1
[[1000, 1000]] : 1000
[[0, 1], [0, 1], [0, 1]] : 2
[[0, 3], [1, 9], [2, 6], [30, 3]] : 7
[[0, 10], [4, 10], [15, 2], [5, 11]] : 15
[[10, 10], [30, 10], [50, 2], [51, 2]] : 6
[[1, 9], [1, 4], [1, 5], [1, 7], [1, 3]] : 13
[[24, 10], [28, 39], [43, 20], [37, 5], [47, 22], [20, 47], [15, 34], [15, 2], [35, 43], [26, 1]] : 72
[[24, 10], [28, 39], [43, 20], [37, 5], [47, 22], [20, 47], [15, 2], [15, 34], [35, 43], [26, 1]] : 72
*/
